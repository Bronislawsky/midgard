#!/usr/bin/env bash
# file : ./midgard
set -euo pipefail
export MIDGARD_VERSION="1.0.0"
#------------------------------------------------------------------------------
cat <<'EOF'

         .__    .___                      .___
   _____ |__| __| _/ _________ _______  __| _/
  /     \|  |/ __ | / ___\__  \\_  __ \/ __ |
 |  Y Y  \  / /_/ |/ /_/  > __ \|  | \/ /_/ |
 |__|_|  /__\____ |\___  (____  /__|  \____ |
       \/        \/_____/     \/           \/

EOF

EPOCH_TIMESTAMP="$(date +%s)"
export EPOCH_TIMESTAMP

echo -e " Version : ${MIDGARD_VERSION}\n"

# midgard — main launcher
#------------------------------------------------------------------------------

# Guard: only code sourced from this launcher is allowed to run
export MIDGARD_MAIN="1"

# Source helpers (colors, status_* functions, etc.)
source "$(dirname "$0")/scripts/helper"

# Source crypt for encrypting / decrypting
source "$(dirname "$0")/scripts/crypt"

# Load config file
MIDGARD_CONFIG_FILE="$(dirname "$0")/config/midgard.conf"
status_start "Loading config file ${MIDGARD_CONFIG_FILE} ..."
if [[ ! -f "$MIDGARD_CONFIG_FILE" ]]; then
    status_fail
    echo "    - config file not found"
    exit 1
fi

# shellcheck disable=SC1090
if ! source "$MIDGARD_CONFIG_FILE"; then
    status_fail
    echo "    - could not source $MIDGARD_CONFIG_FILE"
    exit 1
else
    status_ok
fi

# Validate config (uses already-loaded variables, dies if invalid)
source "$(dirname "$0")/scripts/load-config"

# Check binaries + sudo -n (dies on error)
source "$(dirname "$0")/scripts/binary-check"

# Source integrity check
source "$(dirname "$0")/scripts/integrity-check"
integrity_check_main

# Site configuration helper
source "$(dirname "$0")/scripts/inspect-site"

# Site management helpers (defines site_list/site_enable/site_disable)
source "$(dirname "$0")/scripts/site"

# Site loader (enabled list + load into assoc arrays)
source "$(dirname "$0")/scripts/site-load"

# Files retrievale functions
source "$(dirname "$0")/scripts/pull-rsync"

# Database retrievale functions
source "$(dirname "$0")/scripts/pull-sql"

# Clamav & Maldet Scans
source "$(dirname "$0")/scripts/scan-clamav"
source "$(dirname "$0")/scripts/scan-maldet"

# fast-path subcommands that don't need global config
case "${1-}" in
  encstr)
    midgard_encstr; exit 0 ;;
  decstr)
     midgard_decstr; exit 0 ;;
  create-site)
    shift
    source "$(dirname "$0")/scripts/create-site" "$@"
    exit 0
    ;;
  inspect-site)
    shift
    inspect_site_main "$@"
    exit $?
    ;;
  site)
    shift
    sub="${1-}"; shift || true
    case "${sub:-}" in
      list)
        site_list; exit $? ;;
      enable)
        site_enable "${1-}"; exit $? ;;
      disable)
        site_disable "${1-}"; exit $? ;;
      *)
        echo "Usage: ./midgard site {list|enable <site>|disable <site>}"; exit 1 ;;
    esac
    ;;
esac


# Create a list of enabled websites
ENABLED_SITES=()
for f in "$(dirname "$0")/sites-enabled/"*.conf; do
  # Skip glob if no matches
  [[ -e "$f" ]] || continue
  # Ensure it’s really a symlink and points to a file
  [[ -L "$f" ]] || continue
  # Strip path + .conf extension → just the site name
  site="$(basename "$f" .conf)"
  # Skip the template/example site
  [[ "$site" == "example.com" ]] && continue
  ENABLED_SITES+=("$site")
done

status_start "Inspect all enabled sites (skip-encrypt) ..."
echo
for enabled_site in "${ENABLED_SITES[@]}"; do
  inspect_site_main "$enabled_site" "skip-encrypt" || { status_fail; echo "    - inspection failed for $enabled_site"; exit 1; }
done;

status_start "Load all enabled sites ..."
echo
declare -gA CONFIG_SITES=()   # map site -> array name
for enabled_site in "${ENABLED_SITES[@]}"; do
  # Create a legal array name (dots -> underscores)
  arr="SITE_${enabled_site//./_}"
  declare -gA "$arr"
  status_start "  $enabled_site"
  site_load_into "$enabled_site" "$arr" || { echo "  Failed to load site: $enabled_site"; exit 1; }
  status_ok
  CONFIG_SITES["$enabled_site"]="$arr"
done;

# Start Main Backup Loop (Fetch)
status_start "Pulling files and database content..."
echo
for enabled_site in "${ENABLED_SITES[@]}"; do

  if ! pull_rsync_site "$enabled_site"; then
    echo "    - rsync pull failed for ${enabled_site}"
    exit 1
  fi

  # Database
  if ! pull_sql_site "$enabled_site"; then
    echo "    - SQL dump failed for ${enabled_site}"
    exit 1
  fi

done

# Start Inpection loop
status_start "Websites Inspections"
echo
for enabled_site in "${ENABLED_SITES[@]}"; do

  # ClamAV
  if ! scan_clamav_site "$enabled_site"; then
    echo "    - clamdscan failed for ${enabled_site}"; exit 1
  fi

  # Maldet
  if ! scan_maldet_site "$enabled_site"; then
    echo "    - maldet scan failed for ${enabled_site}"; exit 1
  fi

done

#!/usr/bin/env bash
# file : ./script/helper
#------------------------------------------------------------------------------
#
#         .__    .___                      .___
#   _____ |__| __| _/ _________ _______  __| _/
#  /     \|  |/ __ | / ___\__  \\_  __ \/ __ |
# |  Y Y  \  / /_/ |/ /_/  > __ \|  | \/ /_/ |
# |__|_|  /__\____ |\___  (____  /__|  \____ |
#       \/        \/_____/     \/           \/
#
# helper â€” shared helpers (colors, status)
#------------------------------------------------------------------------------

# Enforce: only usable when sourced by the main launcher
if [[ "${MIDGARD_MAIN:-}" != "1" ]]; then
  echo "This script must be sourced from the midgard launcher." >&2
  return 1 2>/dev/null || exit 1
fi

# --- ANSI Colors ---
c_reset="\033[0m"

# Regular Colors
c_black="\033[0;30m"
c_red="\033[0;31m"
c_green="\033[0;32m"
c_yellow="\033[1;33m"
c_blue="\033[0;34m"
c_purple="\033[0;35m"
c_cyan="\033[0;36m"
c_light_gray="\033[0;37m"

# Bright Colors
c_dark_gray="\033[1;30m"
c_light_red="\033[1;31m"
c_light_green="\033[1;32m"
c_light_yellow="\133[0;33m"
c_light_blue="\033[1;34m"
c_light_purple="\033[1;35m"
c_light_cyan="\033[1;36m"
c_white="\033[1;37m"

# Status line pieces: blue brackets, green OK / red FAIL
brackets_open()  { echo -en "${c_blue}["; }
brackets_close() { echo -en "${c_blue}]${c_reset}"; }
ok_word()        { echo -en "${c_green}OK${c_reset}"; }
fail_word()      { echo -en "${c_red}FAIL${c_reset}"; }

# High-level helpers
info()  { echo -e "${c_cyan}$1${c_reset}"; }
ok()    { brackets_open; ok_word; brackets_close; echo; }
fail()  { brackets_open; fail_word; brackets_close; echo; }

midgard_current_time() {
  echo -en $(date "+%Y-%m-%d %T")
}

# One-liners:
#   status_start "Loading config file /path ..."
#   status_ok
#   status_fail
status_start() { echo -en "$1 "; }
status_ok()    { ok; }
status_fail()  { fail; }

# midgard_get_value_from_array <assoc_array_name> <key>
#
#   Retrieve the value of <key> from an associative array <assoc_array_name>.
#
# Arguments:
#   <assoc_array_name>   Name of the associative array (passed as a string).
#                        Example: "SITE_CONF"
#   <key>                Key to look up inside the array.
#                        Example: "LOCAL_SYNC_PATH"
#
# Returns:
#   Prints the value of the key to STDOUT.
#   If the key does not exist, prints an empty string.
#
# Notes:
#   - Uses Bash nameref (declare -n) to reference the array by name.
#   - Safe to call even if the key does not exist.
#   - This is a helper to make array access consistent and more readable.
#
# Example:
#   declare -A SITE_CONF=(
#     [LOCAL_SYNC_PATH]="/mnt/backups/site1/"
#     [DB_NAME]="wordpress"
#   )
#
#   arr="SITE_CONF"
#   LOCAL_SYNC_PATH="$(midgard_get_value_from_array "$arr" LOCAL_SYNC_PATH)"
#   DB_NAME="$(midgard_get_value_from_array "$arr" DB_NAME)"
#
#   echo "$LOCAL_SYNC_PATH"   # -> /mnt/backups/site1/
#   echo "$DB_NAME"           # -> wordpress
#
midgard_get_value_from_array() {
  local array_name="$1"   # Name of the associative array (string)
  local key_name="$2"     # Key to look up inside the array

  # Create a nameref (reference) to the array passed by name.
  # This makes $ref behave like the actual array.
  declare -n ref="$array_name"

  # Print the value of the requested key.
  # If the key does not exist, the expansion returns empty.
  printf '%s' "${ref[$key_name]-}"
}

#!/usr/bin/env bash
# file : ./scripts/pull-rsync
#------------------------------------------------------------------------------
#
#         .__    .___                      .___
#   _____ |__| __| _/ _________ _______  __| _/
#  /     \|  |/ __ | / ___\__  \\_  __ \/ __ |
# |  Y Y  \  / /_/ |/ /_/  > __ \|  | \/ /_/ |
# |__|_|  /__\____ |\___  (____  /__|  \____ |
#       \/        \/_____/     \/           \/
#
# pull-rsync — rsync remote site files to LOCAL_SYNC_PATH
#   - requires MIDGARD_MAIN=1 + global config loaded (RSYNC_BIN, retries)
#   - expects CONFIG_SITES map & SITE_<name> arrays already populated
#------------------------------------------------------------------------------

[[ "${MIDGARD_MAIN:-}" == "1" ]] || {
  echo "This script must be sourced from the midgard launcher." >&2
  return 1 2>/dev/null || exit 1
}

# ---- tiny helpers ----
_get() { # _get <assoc_array_name> <key>
  local _arr="$1" _key="$2"
  eval 'printf "%s" "${'"${_arr}"'['"$_key"']-}"'
}

# pull_rsync_site <site>
pull_rsync_site() {
  local site="$1"
  [[ -n "$site" ]] || { echo "pull_rsync_site: missing site" >&2; return 2; }

  # resolve per-site array name
  local arr_name="${CONFIG_SITES[$site]-}"
  [[ -n "$arr_name" ]] || { echo "pull_rsync_site: site not loaded: $site" >&2; return 2; }

  # fetch fields
  local REMOTE_USER REMOTE_HOST REMOTE_PATH LOCAL_SYNC_PATH INCLUDE_DIRS IGNORE_DIRS
  local SSH_KEY_PRIV
  REMOTE_USER="$(_get "$arr_name" REMOTE_USER)"
  REMOTE_HOST="$(_get "$arr_name" REMOTE_HOST)"
  REMOTE_PATH="$(_get "$arr_name" REMOTE_PATH)"
  LOCAL_SYNC_PATH="$(_get "$arr_name" LOCAL_SYNC_PATH)"
  INCLUDE_DIRS="$(_get "$arr_name" INCLUDE_DIRS)"
  IGNORE_DIRS="$(_get "$arr_name" IGNORE_DIRS)"
  SSH_KEY_PRIV="$(_get "$arr_name" SSH_KEY_PRIV)"

  # dirs/files for logging/report
  local root_dir logs_dir reports_dir site_log site_report
  root_dir="$(cd -- "$(dirname "${BASH_SOURCE[0]}")/.." &>/dev/null; pwd -P)"
  logs_dir="${root_dir}/logs/${EPOCH_TIMESTAMP}"
  reports_dir="${root_dir}/reports/${EPOCH_TIMESTAMP}"
  mkdir -p "$logs_dir" "$reports_dir"

  site_log="${logs_dir}/${site}.log"
  site_report="${reports_dir}/${site}.report"

  # sanity + env
  local errors=()
  [[ -x "${RSYNC_BIN:-}" ]] || errors+=("RSYNC_BIN not executable: ${RSYNC_BIN:-<unset>}")
  [[ -n "$REMOTE_USER"     ]] || errors+=("REMOTE_USER missing")
  [[ -n "$REMOTE_HOST"     ]] || errors+=("REMOTE_HOST missing")
  [[ -n "$REMOTE_PATH"     ]] || errors+=("REMOTE_PATH missing")
  [[ -n "$LOCAL_SYNC_PATH" ]] || errors+=("LOCAL_SYNC_PATH missing")
  [[ -r "$SSH_KEY_PRIV"    ]] || errors+=("SSH private key not readable: $SSH_KEY_PRIV")

  if (( ${#errors[@]} )); then
    status_fail
    printf '    - %s\n' "${errors[@]}"
    echo "RSYNC=FAIL" > "$site_report"
    return 1
  fi

  # normalize slashes
  [[ "${REMOTE_PATH: -1}" == "/" ]] || REMOTE_PATH="${REMOTE_PATH}/"
  LOCAL_SYNC_PATH="${LOCAL_SYNC_PATH%/}"

  # ssh wrapper for rsync
  local -a ssh_opts=(
    -i "$SSH_KEY_PRIV"
    -o BatchMode=yes
    -o StrictHostKeyChecking=accept-new
    -o ConnectTimeout=15
  )
  local rsh="ssh ${ssh_opts[*]}"

  # rsync flags — no --progress to avoid ^M; show itemized changes instead
  local -a base_flags=(
    -aHAX
    --numeric-ids
    --delete
    --partial
    --inplace
    --human-readable
    --stats
    -i                              # itemize changes
    --out-format='%i %n%L'          # clean per-file lines
    --no-inc-recursive
  )

  # excludes from IGNORE_DIRS (full mirror path)
  local -a excludes=()
  if [[ -n "$IGNORE_DIRS" && -z "$INCLUDE_DIRS" ]]; then
    local ex
    for ex in $IGNORE_DIRS; do
      excludes+=( "--exclude=/${ex%/}/" )
    done
  fi

  # destination setup
  mkdir -p "$LOCAL_SYNC_PATH"

  status_start "  rsync ${site} → ${LOCAL_SYNC_PATH} ..."
  {
    echo "== $(date -u +'%FT%TZ') :: RSYNC START :: ${site} =="
    echo "REMOTE: ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PATH}"
    echo "LOCAL : ${LOCAL_SYNC_PATH}/"
    [[ -n "$INCLUDE_DIRS" ]] && echo "INCLUDE_DIRS: $INCLUDE_DIRS"
    [[ -n "$IGNORE_DIRS"  ]] && echo "IGNORE_DIRS : $IGNORE_DIRS"
  } >>"$site_log"

  local tries="${DEFAULT_RETRIES:-3}"
  local backoff="${DEFAULT_RETRY_BACKOFF_SECS:-5}"
  local n rc=0

  if [[ -n "$INCLUDE_DIRS" ]]; then
    # pull only specific subdirs
    local d
    for d in $INCLUDE_DIRS; do
      local src="${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PATH%/}/${d%/}/"
      local dst="${LOCAL_SYNC_PATH%/}/${d%/}/"
      mkdir -p "$dst"
      rc=0
      for ((n=1; n<=tries; n++)); do
        "${RSYNC_BIN}" "${base_flags[@]}" -e "$rsh" -- "$src" "$dst" >>"$site_log" 2>&1 && { rc=0; break; } || rc=$?
        (( n < tries )) && { echo "retry $n/${tries} in ${backoff}s (rc=$rc)" >>"$site_log"; sleep "$backoff"; }
      done
      (( rc == 0 )) || break
    done
  else
    # full mirror with optional excludes
    local src="${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PATH%/}/"
    local dst="${LOCAL_SYNC_PATH%/}/"
    rc=0
    for ((n=1; n<=tries; n++)); do
      "${RSYNC_BIN}" "${base_flags[@]}" -e "$rsh" "${excludes[@]}" -- "$src" "$dst" >>"$site_log" 2>&1 && { rc=0; break; } || rc=$?
      (( n < tries )) && { echo "retry $n/${tries} in ${backoff}s (rc=$rc)" >>"$site_log"; sleep "$backoff"; }
    done
  fi

  if (( rc == 0 )); then
    echo "== $(date -u +'%FT%TZ') :: RSYNC OK : ${site} ==" >>"$site_log"
    echo "RSYNC=OK" > "$site_report"
    status_ok
  else
    echo "== $(date -u +'%FT%TZ') :: RSYNC FAIL(rc=${rc}) : ${site} ==" >>"$site_log"
    echo "RSYNC=FAIL" > "$site_report"
    status_fail
    echo "    - see log: $site_log"
  fi

  return "$rc"
}

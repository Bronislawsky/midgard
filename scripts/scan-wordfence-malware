#!/usr/bin/env bash
# file : ./scripts/scan-wordfence-malware
#------------------------------------------------------------------------------
#
#         .__    .___                      .___
#   _____ |__| __| _/ _________ _______  __| _/
#  /     \|  |/ __ | / ___\__  \\_  __ \/ __ |
# |  Y Y  \  / /_/ |/ /_/  > __ \|  | \/ /_/ |
# |__|_|  /__\____ |\___  (____  /__|  \____ |
#       \/        \/_____/     \/           \/
#
# scan-wordfence-malware — Wordfence CLI file malware scan against a site's mirror
#   - must be sourced by ./midgard (MIDGARD_MAIN=1)
#   - uses CONFIG_SITES + EPOCH_TIMESTAMP + status_* helpers
#   - logs to   ./logs/$EPOCH_TIMESTAMP/<site>.log
#   - appends   ./reports/$EPOCH_TIMESTAMP/<site>.report   with WORDFENCE_MALWARE=OK|FAIL|SKIPPED
#   - exit 0 on “no suspicious files”, 1 on findings/error
#------------------------------------------------------------------------------

# Safety guard
if [[ "${MIDGARD_MAIN:-}" != "1" ]]; then
  echo "This script must be sourced from the midgard launcher." >&2
  return 1 2>/dev/null || exit 1
fi

# name-ref getter: _get <assoc_array_name> <key>
_get() {
  local __arr="$1" __key="$2"
  declare -n __ref="$__arr"
  printf '%s' "${__ref[$__key]-}"
}

scan_wordfence_malware_site() {
  local site="${1:-}"
  [[ -n "$site" ]] || { echo "scan_wordfence_malware_site: missing site"; return 1; }

  local arr="${CONFIG_SITES[$site]:-}"
  [[ -n "$arr" ]] || { echo "scan_wordfence_malware_site: site not loaded: $site"; return 1; }

  # Pull vars from loaded site map
  local LOCAL_SYNC_PATH LOCAL_DOCUMENT_ROOT WORDFENCE_ENABLE
  LOCAL_SYNC_PATH="$(_get "$arr" LOCAL_SYNC_PATH)"
  LOCAL_DOCUMENT_ROOT="$(_get "$arr" LOCAL_DOCUMENT_ROOT)"
  WORDFENCE_ENABLE="$(_get "$arr" WORDFENCE_ENABLE)"

  local log_dir="logs/${EPOCH_TIMESTAMP}"
  local rep_dir="reports/${EPOCH_TIMESTAMP}"
  local site_log="${log_dir}/${site}.log"
  local site_rep="${rep_dir}/${site}.report"
  mkdir -p "$log_dir" "$rep_dir"

  # Respect per-site toggle
  if [[ "${WORDFENCE_ENABLE}" != "y" ]]; then
    echo "  wordfence malware-scan ${site} ... [SKIPPED]" | tee -a "$site_log"
    echo "WORDFENCE_MALWARE=SKIPPED" >> "$site_rep"
    return 0
  fi

  # Resolve scan root (mirror docroot)
  local scan_root="${LOCAL_SYNC_PATH%/}${LOCAL_DOCUMENT_ROOT}"
  if [[ -z "$scan_root" || ! -d "$scan_root" ]]; then
    status_start "  wordfence malware-scan ${site} (missing ${scan_root}) ..."
    status_fail
    echo "    - scan root not found: ${scan_root}" | tee -a "$site_log"
    echo "WORDFENCE_MALWARE=FAIL" >> "$site_rep"
    return 1
  fi

  # Ensure binary is available
  if [[ -z "${WORDFENCE_BIN:-}" || ! -x "${WORDFENCE_BIN}" ]]; then
    status_start "  wordfence malware-scan ${site} ..."
    status_fail
    echo "    - WORDFENCE_BIN not executable: ${WORDFENCE_BIN:-unset}" | tee -a "$site_log"
    echo "WORDFENCE_MALWARE=FAIL" >> "$site_rep"
    return 1
  fi

  # Build command safely as an array (avoid options being treated as files)
  # Flags:
  #   --path <dir>          : root of scan
  #   -a / --include-all-files : include files that don’t match default patterns
  #   --no-color --no-banner --prefix-log-levels : clean, parseable logs
  #   --quiet               : keep output focused on results (we still log everything)
  local -a cmd
  cmd=( "$WORDFENCE_BIN" malware-scan
        --path "$scan_root"
        -a
        --no-color --no-banner --prefix-log-levels
        --quiet )

  status_start "  wordfence malware-scan ${site} ..."
  {
    echo "== $(date -u +'%FT%TZ') :: WORDFENCE MALWARE-SCAN START :: ${site} =="
    echo "PATH: ${scan_root}"
    printf 'CMD :'
    printf ' %q' "${cmd[@]}"
    echo
  } >>"$site_log"

  # Run and capture output to temp; then append to per-site log
  local tmp_out rc=0
  tmp_out="$(mktemp -t wf.malware.${site}.XXXXXX)"
  if ! "${cmd[@]}" >"$tmp_out" 2>&1; then
    rc=$?
  fi
  cat "$tmp_out" >>"$site_log"

  # Parse “Found N suspicious file(s)” → N>0 ⇒ FAIL
  # Example line: “Found 3 suspicious file(s) after processing ...”
  local suspicious="0"
  if grep -qE 'Found +[0-9]+ +suspicious file\(s\)' "$tmp_out"; then
    suspicious="$(grep -Eo 'Found +[0-9]+ +suspicious file\(s\)' "$tmp_out" | awk '{print $2}' | tail -n1)"
  fi
  rm -f "$tmp_out"

  if [[ "$rc" -ne 0 ]]; then
    status_fail
    echo "    - wordfence malware-scan exited with rc=$rc" | tee -a "$site_log"
    echo "WORDFENCE_MALWARE=FAIL" >> "$site_rep"
    return 1
  fi

  if [[ "${suspicious:-0}" -gt 0 ]]; then
    status_fail
    echo "    - wordfence reported ${suspicious} suspicious file(s)" | tee -a "$site_log"
    echo "WORDFENCE_MALWARE=FAIL" >> "$site_rep"
    return 1
  fi

  status_ok
  echo "WORDFENCE_MALWARE=OK" >> "$site_rep"
  return 0
}

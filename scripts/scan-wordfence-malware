#!/usr/bin/env bash
# file : ./scripts/scan-wordfence-malware
#------------------------------------------------------------------------------
#
#         .__    .___                      .___
#   _____ |__| __| _/ _________ _______  __| _/
#  /     \|  |/ __ | / ___\__  \\_  __ \/ __ |
# |  Y Y  \  / /_/ |/ /_/  > __ \|  | \/ /_/ |
# |__|_|  /__\____ |\___  (____  /__|  \____ |
#       \/        \/_____/     \/           \/
#
# scan-wordfence-malware — Wordfence CLI malware scan against a site's WP root
#   - must be sourced by ./midgard (MIDGARD_MAIN=1)
#   - uses CONFIG_SITES + EPOCH_TIMESTAMP + status_* helpers
#   - logs to   ./logs/$EPOCH_TIMESTAMP/<site>.log  (NO COLOR, no site prefix)
#   - terminal shows site prefix + colors, like -db and -vuln
#   - any malware found => FAIL (human review required)
#------------------------------------------------------------------------------

[[ "${MIDGARD_MAIN:-}" == "1" ]] || {
  echo "This script must be sourced from the midgard launcher." >&2
  return 1 2>/dev/null || exit 1
}

scan_wordfence_malware_main() {

  local site="$1"

  mkdir -p "${MIDGARD_SESSION_LOG_DIR}" "${MIDGARD_SESSION_REPORT_DIR}"
  local SITE_LOG_FILE="${MIDGARD_SESSION_LOG_DIR}/${site}.log"
  local SITE_REPORT_FILE="${MIDGARD_SESSION_REPORT_DIR}/${site}.report"

  if [[ -z "$site" ]]; then
    echo "scan_wordfence_malware_main: missing site" >&2
    echo "$(midgard_current_time) Wordfence-CLI malware Scan [FAILED]" >> "$SITE_LOG_FILE"
    echo "WORDFENCE_MALWARE=FAIL" >> "$SITE_REPORT_FILE"
    return 1
  fi

  local assoc_name="${CONFIG_SITES[$site]:-}"
  if [[ -z "$assoc_name" ]]; then
    echo "scan_wordfence_malware_main: site not loaded: $site" >&2
    echo "$(midgard_current_time) Wordfence-CLI malware Scan [FAILED]" >> "$SITE_LOG_FILE"
    echo "WORDFENCE_MALWARE=FAIL" >> "$SITE_REPORT_FILE"
    return 1
  fi

  # Pull per-site values
  local LOCAL_SYNC_PATH LOCAL_DOCUMENT_ROOT LOCAL_WP_ROOT
  local WORDFENCE_ENABLE
  WORDFENCE_ENABLE="$(midgard_get_value_from_array "$assoc_name" WORDFENCE_ENABLE)"
  LOCAL_SYNC_PATH="$(midgard_get_value_from_array "$assoc_name" LOCAL_SYNC_PATH)"
  LOCAL_DOCUMENT_ROOT="$(midgard_get_value_from_array "$assoc_name" LOCAL_DOCUMENT_ROOT)"
  LOCAL_WP_ROOT="${LOCAL_SYNC_PATH%/}${LOCAL_DOCUMENT_ROOT}"

  # Respect toggle
  if [[ "$WORDFENCE_ENABLE" != "y" ]]; then
    echo -e "$(midgard_current_time) ${site} Wordfence-CLI malware Scan ${c_light_blue}[${c_light_red}DISABLED${c_light_blue}]${c_reset}"
    echo "$(midgard_current_time) Wordfence-CLI malware Scan [DISABLED]" >> "$SITE_LOG_FILE"
    echo "WORDFENCE_MALWARE=SKIPPED" >> "$SITE_REPORT_FILE"
    return 0
  fi

  # Sanity checks
  local errors=()
  [[ -n "$LOCAL_SYNC_PATH"     ]] || errors+=("LOCAL_SYNC_PATH")
  [[ -n "$LOCAL_DOCUMENT_ROOT" ]] || errors+=("LOCAL_DOCUMENT_ROOT")
  [[ -n "$LOCAL_WP_ROOT"       ]] || errors+=("LOCAL_WP_ROOT")
  [[ -x "$WORDFENCE_BIN"       ]] || errors+=("WORDFENCE_BIN")
  if (( ${#errors[@]} )); then
    for err in "${errors[@]}"; do
      echo -e "$(midgard_current_time) ${site}   Please verify ${c_light_red}${err}${c_reset}"
      echo    "$(midgard_current_time)    Please verify ${err}" >> "$SITE_LOG_FILE"
    done
    echo -e "$(midgard_current_time) ${site} Wordfence-CLI malware Scan ${c_light_blue}[${c_light_red}FAILED${c_light_blue}]${c_reset}"
    echo   "$(midgard_current_time) Wordfence-CLI malware Scan [FAILED]" >> "$SITE_LOG_FILE"
    echo "WORDFENCE_MALWARE=FAIL" >> "$SITE_REPORT_FILE"
    return 1
  fi

  # START lines (terminal w/ site; log without)
  echo -e "$(midgard_current_time) ${site} Wordfence-CLI malware Scan ${c_light_blue}[${c_green}STARTED${c_light_blue}]${c_reset}"
  echo   "$(midgard_current_time) Wordfence-CLI malware Scan [STARTED]" >> "$SITE_LOG_FILE"

  # Build command
  local -a CMD=(
    "$WORDFENCE_BIN" malware-scan
    "$LOCAL_WP_ROOT"
    -a
    --no-cache
    --no-color
    --no-banner
    --prefix-log-levels
  )

  # Run scan, capture raw output for both log and parsing
  local tmp_out rc=0
  tmp_out="$(mktemp -t wf.malware.${site}.XXXXXXXX.out)"
  set -o pipefail
  if ! "${CMD[@]}" >"$tmp_out" 2>&1; then
    rc=$?
  fi

  # Append raw tool output to log verbatim (INFO + CSV)
  set +o pipefail

  if (( rc != 0 )); then
    rm -f "$tmp_out"
    echo -e "$(midgard_current_time) ${site} Wordfence-CLI malware Scan ${c_light_blue}[${c_light_red}FAILED (rc=${rc})${c_light_blue}]${c_reset}"
    echo   "$(midgard_current_time) Wordfence-CLI malware Scan [FAILED rc=${rc}]" >> "$SITE_LOG_FILE"
    echo "WORDFENCE_MALWARE=FAIL" >> "$SITE_REPORT_FILE"
    return 1
  fi

  # Parse detections (CSV-ish)
  mapfile -t _findings < <(
    gawk -v FPAT='([^,]*)|("([^"]|"")*")' -F',' '
      /,(Hacktool|Malware|Backdoor|Suspicious|Exploit|SEO Spam):/ {
        path=$1; sub(/^"/,"",path); sub(/"$/,"",path)
        class=""
        for (i=2; i<=NF; i++) {
          f=$i; if (f ~ /(Hacktool|Malware|Backdoor|Suspicious|Exploit|SEO Spam):/) {
            sub(/^"/,"",f); sub(/"$/,"",f); gsub(/""/,"\"",f); class=f; break
          }
        }
        if (length(path) && length(class)) print path "|" class
      }
    ' "$tmp_out"
  )
  rm -f "$tmp_out"

  local suspicious_count="${#_findings[@]}"
  if (( suspicious_count > 0 )); then
    local one path klass
    for one in "${_findings[@]}"; do
      path="${one%%|*}"
      klass="${one#*|}"
      # terminal (with site + colors)
      echo -e "$(midgard_current_time) ${site}   Suspicious file : ${c_light_red}${path}${c_reset} — ${c_yellow}${klass}${c_reset}"
      # log (no site, no color)
      echo   "$(midgard_current_time)    Suspicious file : ${path} — ${klass}" >> "$SITE_LOG_FILE"
    done
    echo -e "$(midgard_current_time) ${site}   Summary: ${suspicious_count} suspicious file(s)"
    echo   "$(midgard_current_time)    Summary: ${suspicious_count} suspicious file(s)" >> "$SITE_LOG_FILE"
    echo -e "$(midgard_current_time) ${site} Wordfence-CLI malware Scan ${c_light_blue}[${c_light_red}FAILED${c_light_blue}]${c_reset}"
    echo   "$(midgard_current_time) Wordfence-CLI malware Scan [FAILED]" >> "$SITE_LOG_FILE"
    echo "WORDFENCE_MALWARE=FAIL" >> "$SITE_REPORT_FILE"
    return 1
  fi

  echo -e "$(midgard_current_time) ${site} Wordfence-CLI malware Scan ${c_light_blue}[${c_green}SUCCESS${c_light_blue}]${c_reset}"
  echo   "$(midgard_current_time) Wordfence-CLI malware Scan [SUCCESS]" >> "$SITE_LOG_FILE"
  echo "WORDFENCE_MALWARE=OK" >> "$SITE_REPORT_FILE"
  return 0
}

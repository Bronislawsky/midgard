#!/usr/bin/env bash
# file : ./scripts/site
#------------------------------------------------------------------------------
#
#         .__    .___                      .___
#   _____ |__| __| _/ _________ _______  __| _/
#  /     \|  |/ __ | / ___\__  \\_  __ \/ __ |
# |  Y Y  \  / /_/ |/ /_/  > __ \|  | \/ /_/ |
# |__|_|  /__\____ |\___  (____  /__|  \____ |
#       \/        \/_____/     \/           \/
#
# site â€” list/enable/disable per-site configs
#   - must be sourced by ./midgard (MIDGARD_MAIN=1)
#   - expects helper loaded (status_*, info)
#------------------------------------------------------------------------------

[[ "${MIDGARD_MAIN:-}" == "1" ]] || {
  echo "This script must be sourced from the midgard launcher." >&2
  return 1 2>/dev/null || exit 1
}

_site_paths() {
  # echo root_dir conf_dir enabled_dir
  local script_dir root_dir conf_dir enabled_dir
  script_dir="$(cd -- "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null; pwd -P)"
  root_dir="$(cd -- "${script_dir}/.." &>/dev/null; pwd -P)"
  conf_dir="${root_dir}/sites-available"
  enabled_dir="${root_dir}/sites-enabled"
  echo "$root_dir" "$conf_dir" "$enabled_dir"
}

_is_example() {
  [[ "$1" == "example.com" || "$1" == "example.com.conf" ]]
}

site_list() {
  local root_dir conf_dir enabled_dir
  read -r root_dir conf_dir enabled_dir < <(_site_paths)

  status_start "Listing sites"
  echo

  # Find *.conf in sites-available (skip example.com.conf)
  local f site base enabled mark
  shopt -s nullglob
  for f in "${conf_dir}"/*.conf; do
    base="$(basename "$f")"
    [[ "$base" == "example.com.conf" ]] && continue
    site="${base%.conf}"
    if [[ -L "${enabled_dir}/${base}" ]]; then
      enabled="[ENABLED]"
    else
      enabled="[DISABLED]"
    fi
    echo "  ${site} ${enabled}"
  done
  shopt -u nullglob
  status_ok
}

site_enable() {
  local site="$1"; [[ -n "$site" ]] || { echo "Usage: site_enable <site>"; return 1; }
  _is_example "$site" && { echo "Refusing to operate on example.com"; return 1; }

  local root_dir conf_dir enabled_dir
  read -r root_dir conf_dir enabled_dir < <(_site_paths)

  local src="${conf_dir}/${site}.conf"
  local dst="${enabled_dir}/${site}.conf"

  status_start "Enabling ${site} ..."
  echo

  [[ -f "$src" ]] || { status_fail; echo "    - config not found: $src"; return 1; }
  mkdir -p "$enabled_dir" || true

  if [[ -L "$dst" ]]; then
    status_ok; echo "  Already enabled: $(realpath -m "$dst")"; return 0
  elif [[ -e "$dst" ]]; then
    status_fail; echo "    - target exists and is not a symlink: $dst"; return 1
  fi

  # Create a relative symlink: sites-enabled/<site>.conf -> ../sites-available/<site>.conf
  ( cd "$enabled_dir" && ln -s "../sites-available/${site}.conf" "${site}.conf" ) \
    && { status_ok; echo "  Linked: $(realpath -m "$dst")"; return 0; } \
    || { status_fail; echo "    - failed to create symlink"; return 1; }
}

site_disable() {
  local site="$1"; [[ -n "$site" ]] || { echo "Usage: site_disable <site>"; return 1; }
  _is_example "$site" && { echo "Refusing to operate on example.com"; return 1; }

  local root_dir conf_dir enabled_dir
  read -r root_dir conf_dir enabled_dir < <(_site_paths)

  local dst="${enabled_dir}/${site}.conf"

  status_start "Disabling ${site} ..."
  echo

  if [[ -L "$dst" ]]; then
    rm -f "$dst" && { status_ok; echo "  Removed: $(realpath -m "$dst" 2>/dev/null || echo "$dst")"; return 0; } \
                   || { status_fail; echo "    - failed to remove symlink: $dst"; return 1; }
  elif [[ -e "$dst" ]]; then
    status_fail; echo "    - not a symlink; refusing to delete: $dst"; return 1
  else
    status_ok; echo "  Already disabled (no symlink): $dst"; return 0
  fi
}
